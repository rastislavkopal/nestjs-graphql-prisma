datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id               String    @id @default(cuid())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  email            String    @unique
  password         String
  firstname        String?
  lastname         String?
  posts            Post[]
  role             Role
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  trips            Trip[]
  bookings         Booking[]
  sentReview       Review[]  @relation("SentReviews")
  receiverReview   Review[]  @relation("ReceivedReviews")
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean
  title     String
  content   String?
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
}

enum Role {
  ADMIN
  USER
  ORGANIZER
  GUIDE
}

model Message {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  text       String
  senderId   String
  receiverId String
  sender     User     @relation(name: "SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation(name: "ReceivedMessages", fields: [receiverId], references: [id])
}

model Trip {
  id                  String   @id @default(cuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  organizerId         String
  organizer           User     @relation(fields: [organizerId], references: [id])
  destination         String
  startDate           DateTime
  endDate             DateTime
  cost                Float
  maxParticipants     Int
  currentParticipants Int
  itinerary           String
  title               String
  isPublished         Boolean  @default(false)

  bookings Booking[]
  Review   Review[]
}

enum BookingStatus {
  OPEN
  ACCEPTED
  REJECTED
  CANCELLED
}

model Booking {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  status    BookingStatus @default(OPEN)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  trip   Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId String

  // @@unique([userId, tripId]) // TODO
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int
  message   String

  author      User    @relation(name: "SentReviews", fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  organizer   User?   @relation(name: "ReceivedReviews", fields: [organizerId], references: [id], onDelete: Cascade)
  organizerId String?
  trip        Trip?   @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId      String?
  // @@unique([authorId, organizerId]) // TODO how? 
  // @@unique([authorId, tripId])
}
