# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
  user: User!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input CreateMessageInput {
  receiverId: String!
  text: String!
}

input CreatePostInput {
  content: String!
  title: String!
}

input CreateTripInput {
  cost: Float!
  destination: String!
  endDate: Date!
  itinerary: String!
  maxParticipants: Int!
  startDate: Date!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

input LoginInput {
  email: String!
  password: String!
}

type Message {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  receiver: User!
  sender: User!
  text: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type MessageConnection {
  edges: [MessageEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type MessageEdge {
  cursor: String!
  node: Message!
}

type Mutation {
  changePassword(data: ChangePasswordInput!): User!
  createMessage(data: CreateMessageInput!): Message!
  createPost(data: CreatePostInput!): Post!
  createTrip(data: CreateTripInput!): Trip!
  deleteTrip(id: String!): Trip
  login(data: LoginInput!): Auth!
  refreshToken(token: JWT!): Token!
  removeMessage(id: Int!): Message!
  signup(data: SignupInput!): Auth!
  updateTrip(data: UpdateTripInput!, id: String!): Trip
  updateUser(data: UpdateUserInput!): User!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  asc
  desc
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Post {
  author: User
  content: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  published: Boolean!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type PostConnection {
  edges: [PostEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PostEdge {
  cursor: String!
  node: Post!
}

input PostOrder {
  direction: OrderDirection!
  field: PostOrderField!
}

"""Properties by which post connections can be ordered."""
enum PostOrderField {
  content
  createdAt
  id
  published
  title
  updatedAt
}

type Query {
  hello(name: String!): String!
  helloWorld: String!
  me: User!
  myMessages(after: String, before: String, first: Int, last: Int, receiverId: String, skip: Int): MessageConnection!
  post(postId: String!): Post!
  publishedPosts(after: String, before: String, first: Int, last: Int, orderBy: PostOrder, query: String, skip: Int): PostConnection!
  trip(id: String!): Trip
  trips(after: String, before: String, first: Int, last: Int, orderBy: TripOrder!, query: String, skip: Int): TripConnection!
  userPosts(userId: String!): [Post!]!
}

"""User role"""
enum Role {
  ADMIN
  GUIDE
  ORGANIZER
  USER
}

input SignupInput {
  email: String!
  firstname: String
  lastname: String
  password: String!
}

type Subscription {
  messageCreated: Message!
  postCreated: Post!
}

type Token {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
}

type Trip {
  cost: Float!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  currentParticipants: Int!
  destination: String!
  endDate: Date!
  id: ID!
  itinerary: String!
  maxParticipants: Int!
  organizer: User!
  startDate: Date!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type TripConnection {
  edges: [TripEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type TripEdge {
  cursor: String!
  node: Trip!
}

input TripOrder {
  direction: OrderDirection!
  field: TripOrderField!
}

"""Properties by which trip connections can be ordered."""
enum TripOrderField {
  cost
  createdAt
  currentParticipants
  destination
  id
  maxParticipants
  startDate
  updatedAt
}

input UpdateTripInput {
  cost: Float!
  destination: String!
  endDate: Date!
  itinerary: String!
  maxParticipants: Int!
  startDate: Date!
}

input UpdateUserInput {
  firstname: String
  lastname: String
}

type User {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  email: String!
  firstname: String
  id: ID!
  lastname: String
  posts: [Post!]
  role: Role!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}